package com.example.stayConnected;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;



@Controller
@RequestMapping(path="")
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CountryRepository countryRepository;

    @PostMapping(path="/country") // Map ONLY POST Requests
    public ResponseEntity<Country> addNewCountry (@RequestParam String name
            , @RequestParam String code) {

        Country n = new Country();
        n.setName(name);
        n.setCode(code);
        countryRepository.save(n);
        return new ResponseEntity<>(n, HttpStatus.CREATED);
    }

    @GetMapping(path="/countries")
    public @ResponseBody Iterable<Country> getAllCountries() {
        // This returns a JSON or XML with the users
        return countryRepository.findAll();
    }

    @PutMapping(path = "/country/{id}")
    public ResponseEntity<Country> updateCountry(@PathVariable Integer id, @RequestBody Country country) {
        // This returns a JSON or XML with the country
        var value = countryRepository.findById(id);

        var c = new Country();
        if (value.isEmpty()) {
            c.setId(null);
            c.setName("ERROR");
            c.setCode(String.format("Impossible d'obtenir le pays portant l'identifiant %s", id));
            return new ResponseEntity<>(c, HttpStatus.NOT_FOUND);
        } else {
            c.setId(value.get().getId());
            c.setName(country.getName());
            c.setCode(country.getCode());
            countryRepository.save(c);
            return new ResponseEntity<>(c, HttpStatus.FOUND);
        }
    }

    /*

    @PutMapping(path = "/country/{id}")
    public ResponseEntity<Country> updateCountry(@PathVariable Integer id, @RequestParam String name, @RequestParam String code) {
        // This returns a JSON or XML with the country
        var value = countryRepository.findById(id);

        var c = new Country();
        if (value.isEmpty()) {
            c.setId(null);
            c.setName("ERROR");
            c.setCode(String.format("Impossible d'obtenir le pays portant l'identifiant %s", id));
            return new ResponseEntity<>(c, HttpStatus.NOT_FOUND);
        } else {
            c.setId(value.get().getId());
            c.setName(name);
            c.setCode(code);
            countryRepository.save(c);
            return new ResponseEntity<>(c, HttpStatus.FOUND);
        }
    }
     */


    @RequestMapping(path="/country/{id}", method = RequestMethod.GET)
    public ResponseEntity<Country> getCountry(@PathVariable Integer id) {

        var value = countryRepository.findById(id);

        if(value.isEmpty()) {
            var c = new Country();
            c.setId(null);
            c.setName("ERROR");
            c.setCode(String.format("Impossible d'obtenir le pays portant l'identifiant %s ou ce dernier a été supprimé", id));
            return new ResponseEntity<>(c, HttpStatus.NOT_FOUND);
        } else {
            var c = value.get();
            return new ResponseEntity<>(c, HttpStatus.FOUND);
        }
    }


    @DeleteMapping(value = "/country/{id}")
    public ResponseEntity<Country> deletePost(@PathVariable Integer id) {

        countryRepository.deleteById(id);

        var c = new Country();
        c.setId(null);
        c.setName("Confirmation");
        c.setCode(String.format("Le pays avec l'id %s a été supprimé", id));
        return new ResponseEntity<>(c, HttpStatus.OK);

    }







}